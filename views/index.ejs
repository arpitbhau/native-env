<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="shortcut icon" href="../public/img/logo.svg" type="image/x-icon">
    <link rel="stylesheet" href="../public/css/fonts.css">
    <link rel="stylesheet" href="../public/css/themeManager.css">
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
    <title>native env</title>
</head>
<body class="bg-black">
    
    <div class="main p-5 w-full bg-black text-white relative min-h-screen font-['machinaRegular']">

        <div class="logo absolute flex gap-2 text-lg tracking-wide select-none items-center justify-center">
            <img class="w-12 transition-all duration-500 hover:-translate-y-1" src="../public/img/logo.svg" alt="">
            native env
        </div>
        
        <!-- Room Container -->
        <div class="flex items-center justify-center h-screen">
            <div class="bg-zinc-900 border border-zinc-800 rounded-xl w-full max-w-md p-8 shadow-lg shadow-white/5 backdrop-blur-sm transition-all duration-300">
                <div class="text-center mb-8">
                    <h2 class="text-2xl font-bold text-white mb-2">Enter Room</h2>
                    <p class="text-zinc-400 text-sm">Join with code or create your own</p>
                </div>
                
                <!-- Enter Room Code Section -->
                <div class="mb-8">
                    <p class="text-xs uppercase tracking-wider text-zinc-500 mb-4">6-Digit Code</p>
                    
                    <div class="flex justify-between mb-6">
                        <input type="text" maxlength="1" class="w-12 h-12 rounded-md bg-zinc-800 border border-zinc-700 text-center text-white text-xl focus:outline-none focus:border-zinc-600 focus:ring-1 focus:ring-white/20 transition-all duration-300" onkeyup="this.nextElementSibling?.focus()">
                        <input type="text" maxlength="1" class="w-12 h-12 rounded-md bg-zinc-800 border border-zinc-700 text-center text-white text-xl focus:outline-none focus:border-zinc-600 focus:ring-1 focus:ring-white/20 transition-all duration-300" onkeyup="this.nextElementSibling?.focus()">
                        <input type="text" maxlength="1" class="w-12 h-12 rounded-md bg-zinc-800 border border-zinc-700 text-center text-white text-xl focus:outline-none focus:border-zinc-600 focus:ring-1 focus:ring-white/20 transition-all duration-300" onkeyup="this.nextElementSibling?.focus()">
                        <input type="text" maxlength="1" class="w-12 h-12 rounded-md bg-zinc-800 border border-zinc-700 text-center text-white text-xl focus:outline-none focus:border-zinc-600 focus:ring-1 focus:ring-white/20 transition-all duration-300" onkeyup="this.nextElementSibling?.focus()">
                        <input type="text" maxlength="1" class="w-12 h-12 rounded-md bg-zinc-800 border border-zinc-700 text-center text-white text-xl focus:outline-none focus:border-zinc-600 focus:ring-1 focus:ring-white/20 transition-all duration-300" onkeyup="this.nextElementSibling?.focus()">
                        <input type="text" maxlength="1" class="w-12 h-12 rounded-md bg-zinc-800 border border-zinc-700 text-center text-white text-xl focus:outline-none focus:border-zinc-600 focus:ring-1 focus:ring-white/20 transition-all duration-300">
                    </div>
                    
                    <button class="w-full bg-white text-black py-3 rounded-md font-medium transition-all duration-300 hover:opacity-90 transform hover:translate-y-px shadow-md shadow-white/10 hover:shadow-white/20">
                        Join Session
                    </button>
                </div>
                
                <div class="relative flex items-center my-2">
                    <div class="flex-grow border-t border-zinc-800"></div>
                    <span class="flex-shrink mx-4 text-zinc-500 text-sm">or</span>
                    <div class="flex-grow border-t border-zinc-800"></div>
                </div>
                
                <!-- Create Room Section -->
                <div class="mt-4">
                    <button class="w-full bg-transparent hover:bg-zinc-800 text-white py-3 rounded-md font-medium transition-all duration-300 transform hover:translate-y-px border border-zinc-700 hover:border-white shadow-md shadow-white/5 hover:shadow-white/10">
                        Create New Room
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const inputs = document.querySelectorAll('input[type="text"][maxlength="1"]');
        
        // Remove the onkeyup attribute that was causing issues
        inputs.forEach(input => {
            input.removeAttribute('onkeyup');
        });
        
        // Add proper event listeners
        inputs.forEach((input, index) => {
            // Handle input (typing a character)
            input.addEventListener('input', function(e) {
                // Keep only numbers
                this.value = this.value.replace(/[^0-9]/g, '');
                
                // Move to next input if a number was entered
                if (this.value !== '' && index < inputs.length - 1) {
                    inputs[index + 1].focus();
                }
            });
            
            // Handle all keypresses
            input.addEventListener('keydown', function(e) {
                // Backspace handling
                if (e.key === 'Backspace') {
                    // If current input has a value, just clear it
                    if (this.value !== '') {
                        this.value = '';
                        return;
                    }
                    
                    // If current input is empty, go to previous and clear it
                    if (index > 0) {
                        inputs[index - 1].value = '';
                        inputs[index - 1].focus();
                    }
                }
                
                // Arrow left - move focus left if possible
                else if (e.key === 'ArrowLeft' && index > 0) {
                    inputs[index - 1].focus();
                }
                
                // Arrow right - move focus right if possible
                else if (e.key === 'ArrowRight' && index < inputs.length - 1) {
                    inputs[index + 1].focus();
                }
                
                // Delete key - just clear current input
                else if (e.key === 'Delete') {
                    this.value = '';
                }
            });
        });
        
        // Handle paste event on the first input
        inputs[0].addEventListener('paste', function(e) {
            e.preventDefault();
            const pasteData = (e.clipboardData || window.clipboardData).getData('text');
            
            if (/^\d+/.test(pasteData)) {
                // Extract only digits
                const digits = pasteData.replace(/\D/g, '');
                
                // Fill inputs with pasted digits
                for (let i = 0; i < Math.min(digits.length, inputs.length); i++) {
                    inputs[i].value = digits[i];
                }
                
                // Focus the appropriate input after paste
                if (digits.length >= inputs.length) {
                    inputs[inputs.length - 1].focus();
                } else if (digits.length > 0) {
                    inputs[digits.length].focus();
                }
            }
        });
        
        // Add paste handler to all inputs
        inputs.forEach(input => {
            input.addEventListener('paste', function(e) {
                // Redirect all paste events to the first input
                e.preventDefault();
                inputs[0].focus();
                
                // Create a new paste event for the first input
                const clipboardData = e.clipboardData || window.clipboardData;
                const pasteEvent = new ClipboardEvent('paste', {
                    clipboardData: clipboardData,
                    bubbles: true
                });
                
                // Dispatch the paste event on the first input
                setTimeout(() => {
                    inputs[0].dispatchEvent(pasteEvent);
                }, 0);
            });
        });
        
        // Add button handler
        const joinButton = document.querySelector('button');
        if (joinButton) {
            joinButton.addEventListener('click', function() {
                const code = Array.from(inputs).map(input => input.value || '').join('');
                if (code.length === 6) {
                    console.log('Room code submitted:', code);
                    // Process the code
                } else {
                    alert('Please enter all 6 digits');
                }
            });
        }
    });
    </script>
</body>
</html>